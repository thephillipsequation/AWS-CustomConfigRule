---
Description: Automate the creation of a custom AWS Config Rule that 
  evaluates S3 buckets as compliant only when the bucket name starts with the region it's in
  (i.e. 'us-west-2-awesomebucket')
AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  EmailAddress:
    Description: Email Address for sending SNS notifications for CodeCommit
    Type: String
  RepositoryBranch:
    Description: The name of the branch for the CodeCommit repo
    Type: String
    Default: master
    AllowedPattern: "[\\x20-\\x7E]*"
    ConstraintDescription: Can contain only ASCII characters.

Resources:
  ArtifactBucket:
    BucketName: "us-east-1-jp-cfn-241-lambda-code"
    Type: AWS::S3::bucket
    DeletionPolicy: Delete

  CompliantBucket:
    Type: AWS::S3::bucket
    BucketName: "us-east-1-jp-cfn-241-test-1"
    DeletionPolicy: Delete

  NonCompliantBucket:
    Type: AWS::S3::bucket
    BucketName: "no-region-jp-cfn-241-test-2"
    DeletionPolicy: Delete

  CodeBuildRole:
    Type: AWS::IAM::CodeBuildRole
    Properties: 
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
        Path: "/"
        Policies:
        - PolicyName: jp-cfn-241-codebuild-service
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action: "*"
              Resource: "*"
            Version: '2012-10-17'

  GoCodeBucketPolicy:
  Type: "AWS::S3::BucketPolicy"
  Properties: 
    Bucket: String
    PolicyDocument:
      Statement:
        Action: 
          - "s3:GetObject"
        Effect: "Allow"
        Resource:
          - !Sub arn::aws:s3:::${GoCodeBucket}

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codepipeline.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codepipeline-service
        PolicyDocument:
          Statement:
          - Action:
            - codecommit:GetBranch
            - codecommit:GetCommit
            - codecommit:UploadArchive
            - codecommit:GetUploadArchiveStatus
            - codecommit:CancelUploadArchive
            - codebuild:*
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:GetObject
            - s3:GetObjectVersion
            - s3:GetBucketVersioning
            Resource: "*"
            Effect: Allow
          - Action:
            - s3:PutObject
            Resource:
              - arn:aws:s3:::codepipeline*
          - Action:
            - lambda:InvokeFunction
            - lambda:ListFunctions
            Resource: "*"
            Effect: Allow
          Version: '2012-10-17'

  ConfigRuleCodeBuild:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/python:2.7.12
      Source:
        Location: "arn:aws:codecommit:us-east-1:324320755747:JP-CFN-241"
        Type: CODECOMMIT
      TimeoutInMinutes: 10
      ServiceRole: !GetAtt 
        - CodeBuildRole
        - Arn
      Artifacts:
        Type: no_artifacts

  ConfigRulePipeline:
    Type: AWS::CodePipeline:Pipeline
    Properties:
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      Stages:
      - Name: Source
        ActionTypeId:
          Category: Source
          Owner: AWS
          Version: '1'
          Provider: CodeCommit
            - Name: Build
        Actions:
        - InputArtifacts: 
            - Name: Source
      - Name: Create Config Rule
        Actions: 
          - 
            Name: CreateConfigRule
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Version: 
              Provider: CloudFormation
            InputArtifacts:
              - Name: Source
            Configuration:
              StackName: jp-cfn-241-config-rule
              ActionMode: CREATE_UPDATE
              TemplatePath: Source::ConfigRule.yaml
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactS3Bucket
      # if ConfigRule.yaml changes
        # Zip up lambda.go and upload it to S3
        # have code deploy launch ConfigRule.yaml and take locatiof of uploaded artifact as parameter
        
    


